/*
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'java'
    id 'java-library-distribution'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'jacoco'
    id 'me.qoomon.git-versioning' version '2.1.1'
    id 'maven-publish'
    // id 'maven'
    id 'signing'
}

group 'de.upb.cs.uc4'
version = "0.0.0-SNAPSHOT"
gitVersioning.apply {
  branch {
    pattern = '(?<branch>.+)'
    versionFormat = '${branch}-${commit.timestamp.datetime}-SNAPSHOT'
  }
  tag {
    pattern = 'v(?<tagVersion>([0-9].[0-9].[0-9]))'
    versionFormat = '${tagVersion}'
  }
}

dependencies {
    implementation 'org.hyperledger.fabric-chaincode-java:fabric-chaincode-shim:2.2.0'
    implementation 'com.owlike:genson:1.5'
    implementation 'com.google.code.gson:gson:2.8.6'
    compile group: 'org.threeten', name: 'threetenbp', version: '1.4.4'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.0'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-core:2.+'
}

repositories {
    mavenCentral()
    maven {
        url 'https://hyperledger.jfrog.io/hyperledger/fabric-maven'
    }
    jcenter()
    maven {
        url 'https://jitpack.io'
    }
}

/* repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
authentication(userName: ossrhUsername, password: ossrhPassword)
  }

snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
authentication(userName: ossrhUsername, password: ossrhPassword)
  }*/
def getRepositoryUrl() {
    def releaseRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
    if (version.endsWith('SNAPSHOT')) {
        return snapshotsRepoUrl
    } else {
        return releaseRepoUrl
    }
}

def SONATYPE_USERNAME = findProperty("SONATYPE_USERNAME").toString()
def SONATYPE_PW = findProperty("SONATYPE_PW").toString()
def PGP_Key = findProperty("PGP_SECRET").toString()
def PGP_PASSPHRASE = findProperty("PGP_PASSPHRASE").toString()

publishing {
    repositories {
        maven {
            credentials {
                username = SONATYPE_USERNAME
                password = SONATYPE_PW
            }
            // beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            url = getRepositoryUrl()
        }
    }
    publications {
        mavenJava(MavenPublication) {
	    artifactId = 'hlf-chaincode'
            pom {
		        // group = 'de.upb.cs.uc4' // set by general info
		        // verion = '0.0.0-Snapshot' // set by general info
		        // name = 'hlf-chaincode' // set by general info
                description = 'The UC4 chaincode to set up our UniversityCredits4.0 network'
                url = 'https://uc4.cs.upb.de/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'UC4'
                        name = 'UC4'
                        email = 'UC4_official@web.de'
			            url = 'https://github.com/upb-uc4'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/upb-uc4/hlf-chaincode.git'
                    developerConnection = 'scm:git:git@github.com:upb-uc4/hlf-chaincode.git'
                    url = 'https://github.com/upb-uc4/hlf-chaincode'
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(PGP_Key, PGP_PASSPHRASE)
    sign publishing.publications.mavenJava
}

shadowJar {
    version = rootProject.version
    manifest {
        attributes 'Main-Class': 'org.hyperledger.fabric.contract.ContractRouter'
    }
}


// Tell gradle which main class to execute
apply plugin : 'java'
ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
    javaMainClass = 'org.hyperledger.fabric.contract.ContractRouter'
}

application {
    mainClassName = javaMainClass
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
check.dependsOn jacocoTestCoverageVerification
